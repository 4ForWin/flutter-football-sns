import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:intl/intl.dart';
import 'package:mercenaryhub/presentation/pages/home/view_models/mercenary_feed_view_model.dart';
import 'package:mercenaryhub/presentation/pages/home/widgets/post_text.dart';
import 'package:mercenaryhub/presentation/pages/home/widgets/state_icons.dart';
import 'package:swipable_stack/swipable_stack.dart';

class MercenarySearchTab extends ConsumerStatefulWidget {
  const MercenarySearchTab({super.key});

  @override
  ConsumerState<MercenarySearchTab> createState() => _MercenarySearchTabState();
}

class _MercenarySearchTabState extends ConsumerState<MercenarySearchTab> {
  @override
  Widget build(BuildContext context) {
    final swipableStackController = SwipableStackController();
    final feedState = ref.watch(mercenaryFeedViewModelProvider);
    final feedVm = ref.read(mercenaryFeedViewModelProvider.notifier);

    print('‚úåÔ∏è Ïö©Î≥ë Ï∞æÍ∏∞ ÌîºÎìú ÌôîÎ©¥ ÎπåÎìú');
    print(
        '‚úåÔ∏è ÌîºÎìú ÏÉÅÌÉú: Î°úÎî©=${feedState.isLoading}, ÎßàÏßÄÎßâ=${feedState.isLast}, ÌîºÎìúÏàò=${feedState.feedList.length}');

    if (feedState.isLoading) {
      return Container(
        color: const Color(0xff2B2B2B),
        child: const Center(
          child: CircularProgressIndicator(),
        ),
      );
    }

    return Stack(
      children: [
        Container(
          color: const Color(0xff2B2B2B),
          child: Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                if (feedState.isLast)
                  const Text(
                    'ÌîºÎìúÍ∞Ä Îçî Ïù¥ÏÉÅ ÏóÜÏäµÎãàÎã§',
                    style: TextStyle(
                      color: Colors.white,
                    ),
                  ),
                ElevatedButton(
                  onPressed: () {
                    print('üîÑ ÏÉàÎ°úÍ≥†Ïπ® Î≤ÑÌäº ÌÅ¥Î¶≠');
                    feedVm.initialize(isRefresh: true);
                  },
                  child: const Text(
                    'ÏÉàÎ°úÍ≥†Ïπ®',
                  ),
                )
              ],
            ),
          ),
        ),
        GestureDetector(
          onDoubleTap: () {
            print('üò≥ ÎçîÎ∏îÌÉ≠ - Îã§Ïùå ÌîºÎìúÎ°ú');
            swipableStackController.next(
              swipeDirection: SwipeDirection.up,
            );
          },
          child: SwipableStack(
            controller: swipableStackController,
            itemCount: feedState.feedList.length,
            detectableSwipeDirections: const {
              SwipeDirection.right,
              SwipeDirection.left,
            },
            // Ïä§ÏôÄÏù¥ÌîÑÍ∞Ä ÏôÑÎ£åÎêòÎ©¥, Ï¶â ÌòÑÏû¨ Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏÇ¨ÎùºÏßÄÎ©¥ Î∞úÏÉùÌïòÎäî Ïù¥Î≤§Ìä∏
            onSwipeCompleted: (index, direction) async {
              final currentFeed = feedState.feedList[index];
              final currentUser = FirebaseAuth.instance.currentUser;

              print('üéØ Ïπ¥Îìú $indexÍ∞Ä $directionÏúºÎ°ú Ïä§ÏôÄÏù¥ÌîÑÎê®');
              print('üéØ Ïö©Î≥ëÎ™Ö: ${currentFeed.name}');
              print('üéØ ÌîºÎìúID: ${currentFeed.id}');
              print('üéØ ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê: ${currentUser?.uid}');

              if (direction == SwipeDirection.right ||
                  direction == SwipeDirection.left) {
                final isApplicant = direction == SwipeDirection.right;

                print(
                    'üéØ Ï¥àÎåÄ Ïó¨Î∂Ä: $isApplicant (Ïò§Î•∏Ï™Ω=${direction == SwipeDirection.right})');

                try {
                  // 1. Ïö©Î≥ë ÌîºÎìú Î°úÍ∑∏ Ï†ÄÏû•
                  await feedVm.insertMercenaryFeedLog(
                    uid: currentUser!.uid,
                    feedId: currentFeed.id,
                    isApplicant: isApplicant,
                  );

                  if (isApplicant) {
                    print('‚úÖ Ïö©Î≥ë Ï¥àÎåÄ ÌîÑÎ°úÏÑ∏Ïä§ ÏôÑÎ£å');

                    // ÏÑ±Í≥µ ÏïåÎ¶º ÌëúÏãú (ÏÑ†ÌÉùÏÇ¨Ìï≠)
                    if (context.mounted) {
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(
                          content: Text('${currentFeed.name}ÎãòÏùÑ Ï¥àÎåÄÌñàÏäµÎãàÎã§!'),
                          backgroundColor: const Color(0xFF2BBB7D),
                          duration: const Duration(seconds: 2),
                        ),
                      );
                    }
                  } else {
                    print('‚è≠Ô∏è ÌîºÎìú Í±¥ÎÑàÎõ∞Í∏∞ ÏôÑÎ£å');
                  }
                } catch (e) {
                  print('‚ùå Ïä§ÏôÄÏù¥ÌîÑ Ï≤òÎ¶¨ Ï§ë ÏóêÎü¨: $e');

                  // ÏóêÎü¨ ÏïåÎ¶º ÌëúÏãú
                  if (context.mounted) {
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(
                        content: Text('Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.'),
                        backgroundColor: Colors.red,
                        duration: Duration(seconds: 2),
                      ),
                    );
                  }
                }
              }

              // UIÏóêÏÑú ÌîºÎìú Ï†úÍ±∞
              feedVm.removeFeedOfState();

              // ÎßàÏßÄÎßâ ÌîºÎìú Ïù¥Ï†ÑÏóê Îã§Ïùå ÌîºÎìúÎì§ Í∞ÄÏ†∏Ïò§Í∏∞
              if (index == feedState.feedList.length - 2) {
                print('‚ù§Ô∏è Î¨¥Ìïú ÌîºÎìú Î°úÎî© Ìä∏Î¶¨Í±∞');
                feedVm.fetchMercenaryFeeds();
              }
            },
            builder: (context, properties) {
              if (properties.index >= feedState.feedList.length) {
                print(
                    '‚ö†Ô∏è Ïù∏Îç±Ïä§ Î≤îÏúÑ Ï¥àÍ≥º: ${properties.index} >= ${feedState.feedList.length}');
                return const SizedBox.shrink();
              }

              final feed = feedState.feedList[properties.index];

              return Stack(
                children: [
                  Container(
                    width: double.infinity,
                    height: double.infinity,
                    color: const Color(0xff2B2B2B),
                    child: Image.network(
                      feed.imageUrl,
                      fit: BoxFit.cover,
                      errorBuilder: (context, error, stackTrace) {
                        print('‚ùå Ïù¥ÎØ∏ÏßÄ Î°úÎìú Ïã§Ìå®: ${feed.imageUrl}');
                        return Container(
                          color: Colors.grey[800],
                          child: const Center(
                            child: Icon(
                              Icons.image_not_supported,
                              color: Colors.white,
                              size: 64,
                            ),
                          ),
                        );
                      },
                      loadingBuilder: (context, child, loadingProgress) {
                        if (loadingProgress == null) return child;
                        return Container(
                          color: Colors.grey[800],
                          child: const Center(
                            child: CircularProgressIndicator(
                              color: Colors.white,
                            ),
                          ),
                        );
                      },
                    ),
                  ),
                  Container(
                    width: double.infinity,
                    height: double.infinity,
                    color: Colors.black.withValues(alpha: 0.5),
                  ),
                  SizedBox.expand(
                    child: Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 50),
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          const Spacer(flex: 20),
                          PostText(
                            feed.name,
                            fontSize: 24,
                          ),
                          const Spacer(flex: 4),
                          PostText(
                            '${feed.level.split('-').first.trim()}',
                          ),
                          PostText(
                            '${NumberFormat('#,###').format(int.parse(feed.cost))}Ïõê',
                          ),
                          PostText(DateFormat('yyyy-MM-dd').format(feed.date)),
                          PostText(
                            '${DateFormat('HH:mm').format(feed.time.start!)} ~ ${DateFormat('HH:mm').format(feed.time.end!)}',
                          ),
                          PostText(feed.content),
                          const Spacer(flex: 4),
                          const StateIcons(),
                          const Spacer(flex: 4),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              const Icon(
                                Icons.location_on_outlined,
                                color: Colors.white,
                              ),
                              PostText(feed.location),
                            ],
                          ),
                          const Spacer(flex: 4),
                        ],
                      ),
                    ),
                  )
                ],
              );
            },
            overlayBuilder: (context, properties) {
              final opacity = properties.swipeProgress.clamp(0.0, 1.0);

              if (properties.direction == SwipeDirection.right) {
                // Ïò§Î•∏Ï™Ω Ïä§ÏôÄÏù¥ÌîÑ Ï§ëÏóêÎäî Ï¥àÎåÄ ÏïÑÏù¥ÏΩò ÌëúÏãú
                return Opacity(
                  opacity: opacity,
                  child: const Align(
                    alignment: Alignment.centerLeft,
                    child: Padding(
                      padding: EdgeInsets.only(left: 40),
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Icon(Icons.thumb_up, color: Colors.green, size: 48),
                          SizedBox(height: 8),
                          Text(
                            'Ï¥àÎåÄÌïòÍ∏∞',
                            style: TextStyle(
                              color: Colors.green,
                              fontSize: 16,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),
                );
              } else if (properties.direction == SwipeDirection.left) {
                // ÏôºÏ™Ω Ïä§ÏôÄÏù¥ÌîÑ Ï§ëÏóêÎäî Í±¥ÎÑàÎõ∞Í∏∞ ÏïÑÏù¥ÏΩò ÌëúÏãú
                return Opacity(
                  opacity: opacity,
                  child: const Align(
                    alignment: Alignment.centerRight,
                    child: Padding(
                      padding: EdgeInsets.only(right: 40),
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Icon(Icons.thumb_down, color: Colors.red, size: 48),
                          SizedBox(height: 8),
                          Text(
                            'Í±¥ÎÑàÎõ∞Í∏∞',
                            style: TextStyle(
                              color: Colors.red,
                              fontSize: 16,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),
                );
              }

              return const SizedBox.shrink();
            },
          ),
        )
      ],
    );
  }
}
